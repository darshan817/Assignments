# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


from typing_extensions import LiteralString
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List['Serializable'],
    Dict[None, 'Serializable'],
    Dict[bool, 'Serializable'],
    Dict[float, 'Serializable'],
    Dict[int, 'Serializable'],
    Dict[str, 'Serializable'],
]


StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilter'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)



class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilter'],
    },
    total=False,
)



class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilter'],
    },
    total=False,
)



class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilter'],
    },
    total=False,
)



class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilter'],
    },
    total=False,
)



class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilter'],
    },
    total=False,
)



class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilter'],
    },
    total=False,
)



class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# Company types

class CompanyOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Company create method"""
    id: _int
    products: 'ProductCreateManyNestedWithoutRelationsInput'


class CompanyCreateInput(CompanyOptionalCreateInput):
    """Required arguments to the Company create method"""
    name: _str
    location: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class CompanyOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Company create method, without relations"""
    id: _int


class CompanyCreateWithoutRelationsInput(CompanyOptionalCreateWithoutRelationsInput):
    """Required arguments to the Company create method, without relations"""
    name: _str
    location: _str

class CompanyConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'CompanyCreateWithoutRelationsInput'
    where: 'CompanyWhereUniqueInput'

class CompanyCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'CompanyCreateWithoutRelationsInput'
    connect: 'CompanyWhereUniqueInput'
    connect_or_create: 'CompanyConnectOrCreateWithoutRelationsInput'


class CompanyCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['CompanyCreateWithoutRelationsInput', List['CompanyCreateWithoutRelationsInput']]
    connect: Union['CompanyWhereUniqueInput', List['CompanyWhereUniqueInput']]
    connect_or_create: Union['CompanyConnectOrCreateWithoutRelationsInput', List['CompanyConnectOrCreateWithoutRelationsInput']]

_CompanyWhereUnique_id_Input = TypedDict(
    '_CompanyWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

CompanyWhereUniqueInput = _CompanyWhereUnique_id_Input


class CompanyUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: _str
    location: _str
    products: 'ProductUpdateManyWithoutRelationsInput'


class CompanyUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: _str
    location: _str


class CompanyUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['CompanyCreateWithoutRelationsInput']
    connect: List['CompanyWhereUniqueInput']
    connect_or_create: List['CompanyConnectOrCreateWithoutRelationsInput']
    set: List['CompanyWhereUniqueInput']
    disconnect: List['CompanyWhereUniqueInput']
    delete: List['CompanyWhereUniqueInput']

    # TODO
    # update: List['CompanyUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['CompanyUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['CompanyScalarWhereInput']
    # upsert: List['CompanyUpserteWithWhereUniqueWithoutRelationsInput']


class CompanyUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'CompanyCreateWithoutRelationsInput'
    connect: 'CompanyWhereUniqueInput'
    connect_or_create: 'CompanyConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'CompanyUpdateInput'
    # upsert: 'CompanyUpsertWithoutRelationsInput'


class CompanyUpsertInput(TypedDict):
    create: 'CompanyCreateInput'
    update: 'CompanyUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Company_id_OrderByInput = TypedDict(
    '_Company_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Company_name_OrderByInput = TypedDict(
    '_Company_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Company_location_OrderByInput = TypedDict(
    '_Company_location_OrderByInput',
    {
        'location': 'SortOrder',
    },
    total=True
)

_Company_RelevanceInner = TypedDict(
    '_Company_RelevanceInner',
    {
        'fields': 'List[CompanyScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Company_RelevanceOrderByInput = TypedDict(
    '_Company_RelevanceOrderByInput',
    {
        '_relevance': '_Company_RelevanceInner',
    },
    total=True
)

CompanyOrderByInput = Union[
    '_Company_id_OrderByInput',
    '_Company_name_OrderByInput',
    '_Company_location_OrderByInput',
    '_Company_RelevanceOrderByInput',
]



# recursive Company types
# TODO: cleanup these types



CompanyRelationFilter = TypedDict(
    'CompanyRelationFilter',
    {
        'is': 'CompanyWhereInput',
        'is_not': 'CompanyWhereInput',
    },
    total=False,
)


class CompanyListRelationFilter(TypedDict, total=False):
    some: 'CompanyWhereInput'
    none: 'CompanyWhereInput'
    every: 'CompanyWhereInput'


class CompanyInclude(TypedDict, total=False):
    """Company relational arguments"""
    products: Union[bool, 'FindManyProductArgsFromCompany']


class CompanyIncludeFromCompany(TypedDict, total=False):
    """Relational arguments for Company"""
    products: Union[bool, 'FindManyProductArgsFromCompany']


class CompanyArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    include: 'CompanyIncludeFromCompany'


class FindManyCompanyArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompany'


class CategoryIncludeFromCompany(TypedDict, total=False):
    """Relational arguments for Company"""
    products: Union[bool, 'FindManyProductArgsFromCompany']


class CategoryArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    include: 'CategoryIncludeFromCategory'


class FindManyCategoryArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategory'


class ProductIncludeFromCompany(TypedDict, total=False):
    """Relational arguments for Company"""
    company: Union[bool, 'CompanyArgsFromCompany']
    category: Union[bool, 'CategoryArgsFromCompany']


class ProductArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    include: 'ProductIncludeFromProduct'


class FindManyProductArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProduct'




FindManyCompanyArgs = FindManyCompanyArgsFromCompany
FindFirstCompanyArgs = FindManyCompanyArgsFromCompany


class CompanyWhereInput(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    location: Union[_str, 'types.StringFilter']
    products: 'ProductListRelationFilter'

    # should be noted that AND and NOT should be Union['CompanyWhereInput', List['CompanyWhereInput']]
    # but this causes mypy to hang :/
    AND: List['CompanyWhereInput']
    OR: List['CompanyWhereInput']
    NOT: List['CompanyWhereInput']



# aggregate Company types


class CompanyScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['CompanyScalarWhereWithAggregatesInput']
    OR: List['CompanyScalarWhereWithAggregatesInput']
    NOT: List['CompanyScalarWhereWithAggregatesInput']



class CompanyGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    location: _str
    _sum: 'CompanySumAggregateOutput'
    _avg: 'CompanyAvgAggregateOutput'
    _min: 'CompanyMinAggregateOutput'
    _max: 'CompanyMaxAggregateOutput'
    _count: 'CompanyCountAggregateOutput'


class CompanyAvgAggregateOutput(TypedDict, total=False):
    """Company output for aggregating averages"""
    id: float


class CompanySumAggregateOutput(TypedDict, total=False):
    """Company output for aggregating sums"""
    id: _int


class CompanyScalarAggregateOutput(TypedDict, total=False):
    """Company output including scalar fields"""
    id: _int
    name: _str
    location: _str


CompanyMinAggregateOutput = CompanyScalarAggregateOutput
CompanyMaxAggregateOutput = CompanyScalarAggregateOutput


class CompanyMaxAggregateInput(TypedDict, total=False):
    """Company input for aggregating by max"""
    id: bool
    name: bool
    location: bool


class CompanyMinAggregateInput(TypedDict, total=False):
    """Company input for aggregating by min"""
    id: bool
    name: bool
    location: bool


class CompanyNumberAggregateInput(TypedDict, total=False):
    """Company input for aggregating numbers"""
    id: bool


CompanyAvgAggregateInput = CompanyNumberAggregateInput
CompanySumAggregateInput = CompanyNumberAggregateInput


CompanyCountAggregateInput = TypedDict(
    'CompanyCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'location': bool,
        '_all': bool,
    },
    total=False,
)

CompanyCountAggregateOutput = TypedDict(
    'CompanyCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'location': int,
        '_all': int,
    },
    total=False,
)


CompanyKeys = Literal[
    'id',
    'name',
    'location',
    'products',
]
CompanyScalarFieldKeys = Literal[
    'id',
    'name',
    'location',
]
CompanyScalarFieldKeysT = TypeVar('CompanyScalarFieldKeysT', bound=CompanyScalarFieldKeys)

CompanyRelationalFieldKeys = Literal[
        'products',
    ]

# Category types

class CategoryOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Category create method"""
    id: _int
    products: 'ProductCreateManyNestedWithoutRelationsInput'


class CategoryCreateInput(CategoryOptionalCreateInput):
    """Required arguments to the Category create method"""
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class CategoryOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Category create method, without relations"""
    id: _int


class CategoryCreateWithoutRelationsInput(CategoryOptionalCreateWithoutRelationsInput):
    """Required arguments to the Category create method, without relations"""
    name: _str

class CategoryConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'CategoryCreateWithoutRelationsInput'
    where: 'CategoryWhereUniqueInput'

class CategoryCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'CategoryCreateWithoutRelationsInput'
    connect: 'CategoryWhereUniqueInput'
    connect_or_create: 'CategoryConnectOrCreateWithoutRelationsInput'


class CategoryCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['CategoryCreateWithoutRelationsInput', List['CategoryCreateWithoutRelationsInput']]
    connect: Union['CategoryWhereUniqueInput', List['CategoryWhereUniqueInput']]
    connect_or_create: Union['CategoryConnectOrCreateWithoutRelationsInput', List['CategoryConnectOrCreateWithoutRelationsInput']]

_CategoryWhereUnique_id_Input = TypedDict(
    '_CategoryWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

CategoryWhereUniqueInput = _CategoryWhereUnique_id_Input


class CategoryUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: _str
    products: 'ProductUpdateManyWithoutRelationsInput'


class CategoryUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: _str


class CategoryUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['CategoryCreateWithoutRelationsInput']
    connect: List['CategoryWhereUniqueInput']
    connect_or_create: List['CategoryConnectOrCreateWithoutRelationsInput']
    set: List['CategoryWhereUniqueInput']
    disconnect: List['CategoryWhereUniqueInput']
    delete: List['CategoryWhereUniqueInput']

    # TODO
    # update: List['CategoryUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['CategoryUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['CategoryScalarWhereInput']
    # upsert: List['CategoryUpserteWithWhereUniqueWithoutRelationsInput']


class CategoryUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'CategoryCreateWithoutRelationsInput'
    connect: 'CategoryWhereUniqueInput'
    connect_or_create: 'CategoryConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'CategoryUpdateInput'
    # upsert: 'CategoryUpsertWithoutRelationsInput'


class CategoryUpsertInput(TypedDict):
    create: 'CategoryCreateInput'
    update: 'CategoryUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Category_id_OrderByInput = TypedDict(
    '_Category_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Category_name_OrderByInput = TypedDict(
    '_Category_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Category_RelevanceInner = TypedDict(
    '_Category_RelevanceInner',
    {
        'fields': 'List[CategoryScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Category_RelevanceOrderByInput = TypedDict(
    '_Category_RelevanceOrderByInput',
    {
        '_relevance': '_Category_RelevanceInner',
    },
    total=True
)

CategoryOrderByInput = Union[
    '_Category_id_OrderByInput',
    '_Category_name_OrderByInput',
    '_Category_RelevanceOrderByInput',
]



# recursive Category types
# TODO: cleanup these types



CategoryRelationFilter = TypedDict(
    'CategoryRelationFilter',
    {
        'is': 'CategoryWhereInput',
        'is_not': 'CategoryWhereInput',
    },
    total=False,
)


class CategoryListRelationFilter(TypedDict, total=False):
    some: 'CategoryWhereInput'
    none: 'CategoryWhereInput'
    every: 'CategoryWhereInput'


class CategoryInclude(TypedDict, total=False):
    """Category relational arguments"""
    products: Union[bool, 'FindManyProductArgsFromCategory']


class CompanyIncludeFromCategory(TypedDict, total=False):
    """Relational arguments for Category"""
    products: Union[bool, 'FindManyProductArgsFromCategory']


class CompanyArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    include: 'CompanyIncludeFromCompany'


class FindManyCompanyArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompany'


class CategoryIncludeFromCategory(TypedDict, total=False):
    """Relational arguments for Category"""
    products: Union[bool, 'FindManyProductArgsFromCategory']


class CategoryArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    include: 'CategoryIncludeFromCategory'


class FindManyCategoryArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategory'


class ProductIncludeFromCategory(TypedDict, total=False):
    """Relational arguments for Category"""
    company: Union[bool, 'CompanyArgsFromCategory']
    category: Union[bool, 'CategoryArgsFromCategory']


class ProductArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    include: 'ProductIncludeFromProduct'


class FindManyProductArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProduct'




FindManyCategoryArgs = FindManyCategoryArgsFromCategory
FindFirstCategoryArgs = FindManyCategoryArgsFromCategory


class CategoryWhereInput(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    products: 'ProductListRelationFilter'

    # should be noted that AND and NOT should be Union['CategoryWhereInput', List['CategoryWhereInput']]
    # but this causes mypy to hang :/
    AND: List['CategoryWhereInput']
    OR: List['CategoryWhereInput']
    NOT: List['CategoryWhereInput']



# aggregate Category types


class CategoryScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['CategoryScalarWhereWithAggregatesInput']
    OR: List['CategoryScalarWhereWithAggregatesInput']
    NOT: List['CategoryScalarWhereWithAggregatesInput']



class CategoryGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    _sum: 'CategorySumAggregateOutput'
    _avg: 'CategoryAvgAggregateOutput'
    _min: 'CategoryMinAggregateOutput'
    _max: 'CategoryMaxAggregateOutput'
    _count: 'CategoryCountAggregateOutput'


class CategoryAvgAggregateOutput(TypedDict, total=False):
    """Category output for aggregating averages"""
    id: float


class CategorySumAggregateOutput(TypedDict, total=False):
    """Category output for aggregating sums"""
    id: _int


class CategoryScalarAggregateOutput(TypedDict, total=False):
    """Category output including scalar fields"""
    id: _int
    name: _str


CategoryMinAggregateOutput = CategoryScalarAggregateOutput
CategoryMaxAggregateOutput = CategoryScalarAggregateOutput


class CategoryMaxAggregateInput(TypedDict, total=False):
    """Category input for aggregating by max"""
    id: bool
    name: bool


class CategoryMinAggregateInput(TypedDict, total=False):
    """Category input for aggregating by min"""
    id: bool
    name: bool


class CategoryNumberAggregateInput(TypedDict, total=False):
    """Category input for aggregating numbers"""
    id: bool


CategoryAvgAggregateInput = CategoryNumberAggregateInput
CategorySumAggregateInput = CategoryNumberAggregateInput


CategoryCountAggregateInput = TypedDict(
    'CategoryCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        '_all': bool,
    },
    total=False,
)

CategoryCountAggregateOutput = TypedDict(
    'CategoryCountAggregateOutput',
    {
        'id': int,
        'name': int,
        '_all': int,
    },
    total=False,
)


CategoryKeys = Literal[
    'id',
    'name',
    'products',
]
CategoryScalarFieldKeys = Literal[
    'id',
    'name',
]
CategoryScalarFieldKeysT = TypeVar('CategoryScalarFieldKeysT', bound=CategoryScalarFieldKeys)

CategoryRelationalFieldKeys = Literal[
        'products',
    ]

# Product types

class ProductOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Product create method"""
    id: _int
    company: 'CompanyCreateNestedWithoutRelationsInput'
    companyId: Optional[_int]
    category: 'CategoryCreateNestedWithoutRelationsInput'
    categoryId: Optional[_int]


class ProductCreateInput(ProductOptionalCreateInput):
    """Required arguments to the Product create method"""
    name: _str
    price: _int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ProductOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Product create method, without relations"""
    id: _int
    companyId: Optional[_int]
    categoryId: Optional[_int]


class ProductCreateWithoutRelationsInput(ProductOptionalCreateWithoutRelationsInput):
    """Required arguments to the Product create method, without relations"""
    name: _str
    price: _int

class ProductConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ProductCreateWithoutRelationsInput'
    where: 'ProductWhereUniqueInput'

class ProductCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ProductCreateWithoutRelationsInput'
    connect: 'ProductWhereUniqueInput'
    connect_or_create: 'ProductConnectOrCreateWithoutRelationsInput'


class ProductCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ProductCreateWithoutRelationsInput', List['ProductCreateWithoutRelationsInput']]
    connect: Union['ProductWhereUniqueInput', List['ProductWhereUniqueInput']]
    connect_or_create: Union['ProductConnectOrCreateWithoutRelationsInput', List['ProductConnectOrCreateWithoutRelationsInput']]

_ProductWhereUnique_id_Input = TypedDict(
    '_ProductWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

ProductWhereUniqueInput = _ProductWhereUnique_id_Input


class ProductUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: _str
    price: Union[AtomicIntInput, _int]
    company: 'CompanyUpdateOneWithoutRelationsInput'
    category: 'CategoryUpdateOneWithoutRelationsInput'


class ProductUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: _str
    price: Union[AtomicIntInput, _int]


class ProductUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ProductCreateWithoutRelationsInput']
    connect: List['ProductWhereUniqueInput']
    connect_or_create: List['ProductConnectOrCreateWithoutRelationsInput']
    set: List['ProductWhereUniqueInput']
    disconnect: List['ProductWhereUniqueInput']
    delete: List['ProductWhereUniqueInput']

    # TODO
    # update: List['ProductUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ProductUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ProductScalarWhereInput']
    # upsert: List['ProductUpserteWithWhereUniqueWithoutRelationsInput']


class ProductUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ProductCreateWithoutRelationsInput'
    connect: 'ProductWhereUniqueInput'
    connect_or_create: 'ProductConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ProductUpdateInput'
    # upsert: 'ProductUpsertWithoutRelationsInput'


class ProductUpsertInput(TypedDict):
    create: 'ProductCreateInput'
    update: 'ProductUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Product_id_OrderByInput = TypedDict(
    '_Product_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Product_name_OrderByInput = TypedDict(
    '_Product_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Product_price_OrderByInput = TypedDict(
    '_Product_price_OrderByInput',
    {
        'price': 'SortOrder',
    },
    total=True
)

_Product_companyId_OrderByInput = TypedDict(
    '_Product_companyId_OrderByInput',
    {
        'companyId': 'SortOrder',
    },
    total=True
)

_Product_categoryId_OrderByInput = TypedDict(
    '_Product_categoryId_OrderByInput',
    {
        'categoryId': 'SortOrder',
    },
    total=True
)

_Product_RelevanceInner = TypedDict(
    '_Product_RelevanceInner',
    {
        'fields': 'List[ProductScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Product_RelevanceOrderByInput = TypedDict(
    '_Product_RelevanceOrderByInput',
    {
        '_relevance': '_Product_RelevanceInner',
    },
    total=True
)

ProductOrderByInput = Union[
    '_Product_id_OrderByInput',
    '_Product_name_OrderByInput',
    '_Product_price_OrderByInput',
    '_Product_companyId_OrderByInput',
    '_Product_categoryId_OrderByInput',
    '_Product_RelevanceOrderByInput',
]



# recursive Product types
# TODO: cleanup these types



ProductRelationFilter = TypedDict(
    'ProductRelationFilter',
    {
        'is': 'ProductWhereInput',
        'is_not': 'ProductWhereInput',
    },
    total=False,
)


class ProductListRelationFilter(TypedDict, total=False):
    some: 'ProductWhereInput'
    none: 'ProductWhereInput'
    every: 'ProductWhereInput'


class ProductInclude(TypedDict, total=False):
    """Product relational arguments"""
    company: Union[bool, 'CompanyArgsFromProduct']
    category: Union[bool, 'CategoryArgsFromProduct']


class CompanyIncludeFromProduct(TypedDict, total=False):
    """Relational arguments for Product"""
    products: Union[bool, 'FindManyProductArgsFromProduct']


class CompanyArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    include: 'CompanyIncludeFromCompany'


class FindManyCompanyArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompany'


class CategoryIncludeFromProduct(TypedDict, total=False):
    """Relational arguments for Product"""
    products: Union[bool, 'FindManyProductArgsFromProduct']


class CategoryArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    include: 'CategoryIncludeFromCategory'


class FindManyCategoryArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategory'


class ProductIncludeFromProduct(TypedDict, total=False):
    """Relational arguments for Product"""
    company: Union[bool, 'CompanyArgsFromProduct']
    category: Union[bool, 'CategoryArgsFromProduct']


class ProductArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ProductIncludeFromProduct'


class FindManyProductArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProduct'




FindManyProductArgs = FindManyProductArgsFromProduct
FindFirstProductArgs = FindManyProductArgsFromProduct


class ProductWhereInput(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    price: Union[_int, 'types.IntFilter']
    company: 'CompanyRelationFilter'
    companyId: Union[None, _int, 'types.IntFilter']
    category: 'CategoryRelationFilter'
    categoryId: Union[None, _int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['ProductWhereInput', List['ProductWhereInput']]
    # but this causes mypy to hang :/
    AND: List['ProductWhereInput']
    OR: List['ProductWhereInput']
    NOT: List['ProductWhereInput']



# aggregate Product types


class ProductScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    price: Union[_int, 'types.IntWithAggregatesFilter']
    companyId: Union[_int, 'types.IntWithAggregatesFilter']
    categoryId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ProductScalarWhereWithAggregatesInput']
    OR: List['ProductScalarWhereWithAggregatesInput']
    NOT: List['ProductScalarWhereWithAggregatesInput']



class ProductGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    price: _int
    companyId: _int
    categoryId: _int
    _sum: 'ProductSumAggregateOutput'
    _avg: 'ProductAvgAggregateOutput'
    _min: 'ProductMinAggregateOutput'
    _max: 'ProductMaxAggregateOutput'
    _count: 'ProductCountAggregateOutput'


class ProductAvgAggregateOutput(TypedDict, total=False):
    """Product output for aggregating averages"""
    id: float
    price: float
    companyId: float
    categoryId: float


class ProductSumAggregateOutput(TypedDict, total=False):
    """Product output for aggregating sums"""
    id: _int
    price: _int
    companyId: _int
    categoryId: _int


class ProductScalarAggregateOutput(TypedDict, total=False):
    """Product output including scalar fields"""
    id: _int
    name: _str
    price: _int
    companyId: _int
    categoryId: _int


ProductMinAggregateOutput = ProductScalarAggregateOutput
ProductMaxAggregateOutput = ProductScalarAggregateOutput


class ProductMaxAggregateInput(TypedDict, total=False):
    """Product input for aggregating by max"""
    id: bool
    name: bool
    price: bool
    companyId: bool
    categoryId: bool


class ProductMinAggregateInput(TypedDict, total=False):
    """Product input for aggregating by min"""
    id: bool
    name: bool
    price: bool
    companyId: bool
    categoryId: bool


class ProductNumberAggregateInput(TypedDict, total=False):
    """Product input for aggregating numbers"""
    id: bool
    price: bool
    companyId: bool
    categoryId: bool


ProductAvgAggregateInput = ProductNumberAggregateInput
ProductSumAggregateInput = ProductNumberAggregateInput


ProductCountAggregateInput = TypedDict(
    'ProductCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'price': bool,
        'companyId': bool,
        'categoryId': bool,
        '_all': bool,
    },
    total=False,
)

ProductCountAggregateOutput = TypedDict(
    'ProductCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'price': int,
        'companyId': int,
        'categoryId': int,
        '_all': int,
    },
    total=False,
)


ProductKeys = Literal[
    'id',
    'name',
    'price',
    'company',
    'companyId',
    'category',
    'categoryId',
]
ProductScalarFieldKeys = Literal[
    'id',
    'name',
    'price',
    'companyId',
    'categoryId',
]
ProductScalarFieldKeysT = TypeVar('ProductScalarFieldKeysT', bound=ProductScalarFieldKeys)

ProductRelationalFieldKeys = Literal[
        'company',
        'category',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields