# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


from typing_extensions import LiteralString
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List['Serializable'],
    Dict[None, 'Serializable'],
    Dict[bool, 'Serializable'],
    Dict[float, 'Serializable'],
    Dict[int, 'Serializable'],
    Dict[str, 'Serializable'],
]


StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilter'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)



class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilter'],
    },
    total=False,
)



class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilter'],
    },
    total=False,
)



class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilter'],
    },
    total=False,
)



class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilter'],
    },
    total=False,
)



class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilter'],
    },
    total=False,
)



class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilter'],
    },
    total=False,
)



class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# Record types

class RecordOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Record create method"""
    id: _int


class RecordCreateInput(RecordOptionalCreateInput):
    """Required arguments to the Record create method"""
    name: _str
    email: _str
    age: _int
    country: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class RecordOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Record create method, without relations"""
    id: _int


class RecordCreateWithoutRelationsInput(RecordOptionalCreateWithoutRelationsInput):
    """Required arguments to the Record create method, without relations"""
    name: _str
    email: _str
    age: _int
    country: _str

class RecordConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'RecordCreateWithoutRelationsInput'
    where: 'RecordWhereUniqueInput'

class RecordCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'RecordCreateWithoutRelationsInput'
    connect: 'RecordWhereUniqueInput'
    connect_or_create: 'RecordConnectOrCreateWithoutRelationsInput'


class RecordCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['RecordCreateWithoutRelationsInput', List['RecordCreateWithoutRelationsInput']]
    connect: Union['RecordWhereUniqueInput', List['RecordWhereUniqueInput']]
    connect_or_create: Union['RecordConnectOrCreateWithoutRelationsInput', List['RecordConnectOrCreateWithoutRelationsInput']]

_RecordWhereUnique_id_Input = TypedDict(
    '_RecordWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

RecordWhereUniqueInput = _RecordWhereUnique_id_Input


class RecordUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: _str
    email: _str
    age: Union[AtomicIntInput, _int]
    country: _str


class RecordUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: _str
    email: _str
    age: Union[AtomicIntInput, _int]
    country: _str


class RecordUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['RecordCreateWithoutRelationsInput']
    connect: List['RecordWhereUniqueInput']
    connect_or_create: List['RecordConnectOrCreateWithoutRelationsInput']
    set: List['RecordWhereUniqueInput']
    disconnect: List['RecordWhereUniqueInput']
    delete: List['RecordWhereUniqueInput']

    # TODO
    # update: List['RecordUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['RecordUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['RecordScalarWhereInput']
    # upsert: List['RecordUpserteWithWhereUniqueWithoutRelationsInput']


class RecordUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'RecordCreateWithoutRelationsInput'
    connect: 'RecordWhereUniqueInput'
    connect_or_create: 'RecordConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'RecordUpdateInput'
    # upsert: 'RecordUpsertWithoutRelationsInput'


class RecordUpsertInput(TypedDict):
    create: 'RecordCreateInput'
    update: 'RecordUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Record_id_OrderByInput = TypedDict(
    '_Record_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Record_name_OrderByInput = TypedDict(
    '_Record_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Record_email_OrderByInput = TypedDict(
    '_Record_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_Record_age_OrderByInput = TypedDict(
    '_Record_age_OrderByInput',
    {
        'age': 'SortOrder',
    },
    total=True
)

_Record_country_OrderByInput = TypedDict(
    '_Record_country_OrderByInput',
    {
        'country': 'SortOrder',
    },
    total=True
)

_Record_RelevanceInner = TypedDict(
    '_Record_RelevanceInner',
    {
        'fields': 'List[RecordScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Record_RelevanceOrderByInput = TypedDict(
    '_Record_RelevanceOrderByInput',
    {
        '_relevance': '_Record_RelevanceInner',
    },
    total=True
)

RecordOrderByInput = Union[
    '_Record_id_OrderByInput',
    '_Record_name_OrderByInput',
    '_Record_email_OrderByInput',
    '_Record_age_OrderByInput',
    '_Record_country_OrderByInput',
    '_Record_RelevanceOrderByInput',
]



# recursive Record types
# TODO: cleanup these types



RecordRelationFilter = TypedDict(
    'RecordRelationFilter',
    {
        'is': 'RecordWhereInput',
        'is_not': 'RecordWhereInput',
    },
    total=False,
)


class RecordListRelationFilter(TypedDict, total=False):
    some: 'RecordWhereInput'
    none: 'RecordWhereInput'
    every: 'RecordWhereInput'


class RecordInclude(TypedDict, total=False):
    """Record relational arguments"""


class RecordIncludeFromRecord(TypedDict, total=False):
    """Relational arguments for Record"""


class RecordArgsFromRecord(TypedDict, total=False):
    """Arguments for Record"""
    include: 'RecordIncludeFromRecord'


class FindManyRecordArgsFromRecord(TypedDict, total=False):
    """Arguments for Record"""
    take: int
    skip: int
    order_by: Union['RecordOrderByInput', List['RecordOrderByInput']]
    where: 'RecordWhereInput'
    cursor: 'RecordWhereUniqueInput'
    distinct: List['RecordScalarFieldKeys']
    include: 'RecordIncludeFromRecord'




FindManyRecordArgs = FindManyRecordArgsFromRecord
FindFirstRecordArgs = FindManyRecordArgsFromRecord


class RecordWhereInput(TypedDict, total=False):
    """Record arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    age: Union[_int, 'types.IntFilter']
    country: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['RecordWhereInput', List['RecordWhereInput']]
    # but this causes mypy to hang :/
    AND: List['RecordWhereInput']
    OR: List['RecordWhereInput']
    NOT: List['RecordWhereInput']



# aggregate Record types


class RecordScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Record arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    age: Union[_int, 'types.IntWithAggregatesFilter']
    country: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['RecordScalarWhereWithAggregatesInput']
    OR: List['RecordScalarWhereWithAggregatesInput']
    NOT: List['RecordScalarWhereWithAggregatesInput']



class RecordGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    email: _str
    age: _int
    country: _str
    _sum: 'RecordSumAggregateOutput'
    _avg: 'RecordAvgAggregateOutput'
    _min: 'RecordMinAggregateOutput'
    _max: 'RecordMaxAggregateOutput'
    _count: 'RecordCountAggregateOutput'


class RecordAvgAggregateOutput(TypedDict, total=False):
    """Record output for aggregating averages"""
    id: float
    age: float


class RecordSumAggregateOutput(TypedDict, total=False):
    """Record output for aggregating sums"""
    id: _int
    age: _int


class RecordScalarAggregateOutput(TypedDict, total=False):
    """Record output including scalar fields"""
    id: _int
    name: _str
    email: _str
    age: _int
    country: _str


RecordMinAggregateOutput = RecordScalarAggregateOutput
RecordMaxAggregateOutput = RecordScalarAggregateOutput


class RecordMaxAggregateInput(TypedDict, total=False):
    """Record input for aggregating by max"""
    id: bool
    name: bool
    email: bool
    age: bool
    country: bool


class RecordMinAggregateInput(TypedDict, total=False):
    """Record input for aggregating by min"""
    id: bool
    name: bool
    email: bool
    age: bool
    country: bool


class RecordNumberAggregateInput(TypedDict, total=False):
    """Record input for aggregating numbers"""
    id: bool
    age: bool


RecordAvgAggregateInput = RecordNumberAggregateInput
RecordSumAggregateInput = RecordNumberAggregateInput


RecordCountAggregateInput = TypedDict(
    'RecordCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'email': bool,
        'age': bool,
        'country': bool,
        '_all': bool,
    },
    total=False,
)

RecordCountAggregateOutput = TypedDict(
    'RecordCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'email': int,
        'age': int,
        'country': int,
        '_all': int,
    },
    total=False,
)


RecordKeys = Literal[
    'id',
    'name',
    'email',
    'age',
    'country',
]
RecordScalarFieldKeys = Literal[
    'id',
    'name',
    'email',
    'age',
    'country',
]
RecordScalarFieldKeysT = TypeVar('RecordScalarFieldKeysT', bound=RecordScalarFieldKeys)

RecordRelationalFieldKeys = _NoneType



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields